// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wear_fps_proto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WearFPSForms {

  /// <summary>Holder for reflection information generated from wear_fps_proto.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class WearFpsProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for wear_fps_proto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WearFpsProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR3ZWFyX2Zwc19wcm90by5wcm90byJ8CgdEYXRhSW50Eg8KB2NwdUxvYWQY",
            "ASABKAUSDwoHZ3B1TG9hZBgCIAEoBRILCgNmcHMYAyABKAUSDwoHY3B1VGVt",
            "cBgEIAEoBRIPCgdncHVUZW1wGAUgASgFEg8KB2NwdUZyZXEYBiABKAUSDwoH",
            "Z3B1RnJlcRgHIAEoBSIwCgxDb21wdXRlckluZm8SDwoHY3B1TmFtZRgBIAEo",
            "CRIPCgdncHVOYW1lGAIgASgJQiIKEW1lLm92aWVkby53ZWFyZnBzqgIMV2Vh",
            "ckZQU0Zvcm1zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WearFPSForms.DataInt), global::WearFPSForms.DataInt.Parser, new[]{ "CpuLoad", "GpuLoad", "Fps", "CpuTemp", "GpuTemp", "CpuFreq", "GpuFreq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WearFPSForms.ComputerInfo), global::WearFPSForms.ComputerInfo.Parser, new[]{ "CpuName", "GpuName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataInt : pb::IMessage<DataInt> {
    private static readonly pb::MessageParser<DataInt> _parser = new pb::MessageParser<DataInt>(() => new DataInt());
    public static pb::MessageParser<DataInt> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::WearFPSForms.WearFpsProtoReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DataInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DataInt(DataInt other) : this() {
      cpuLoad_ = other.cpuLoad_;
      gpuLoad_ = other.gpuLoad_;
      fps_ = other.fps_;
      cpuTemp_ = other.cpuTemp_;
      gpuTemp_ = other.gpuTemp_;
      cpuFreq_ = other.cpuFreq_;
      gpuFreq_ = other.gpuFreq_;
    }

    public DataInt Clone() {
      return new DataInt(this);
    }

    /// <summary>Field number for the "cpuLoad" field.</summary>
    public const int CpuLoadFieldNumber = 1;
    private int cpuLoad_;
    public int CpuLoad {
      get { return cpuLoad_; }
      set {
        cpuLoad_ = value;
      }
    }

    /// <summary>Field number for the "gpuLoad" field.</summary>
    public const int GpuLoadFieldNumber = 2;
    private int gpuLoad_;
    public int GpuLoad {
      get { return gpuLoad_; }
      set {
        gpuLoad_ = value;
      }
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 3;
    private int fps_;
    public int Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    /// <summary>Field number for the "cpuTemp" field.</summary>
    public const int CpuTempFieldNumber = 4;
    private int cpuTemp_;
    public int CpuTemp {
      get { return cpuTemp_; }
      set {
        cpuTemp_ = value;
      }
    }

    /// <summary>Field number for the "gpuTemp" field.</summary>
    public const int GpuTempFieldNumber = 5;
    private int gpuTemp_;
    public int GpuTemp {
      get { return gpuTemp_; }
      set {
        gpuTemp_ = value;
      }
    }

    /// <summary>Field number for the "cpuFreq" field.</summary>
    public const int CpuFreqFieldNumber = 6;
    private int cpuFreq_;
    public int CpuFreq {
      get { return cpuFreq_; }
      set {
        cpuFreq_ = value;
      }
    }

    /// <summary>Field number for the "gpuFreq" field.</summary>
    public const int GpuFreqFieldNumber = 7;
    private int gpuFreq_;
    public int GpuFreq {
      get { return gpuFreq_; }
      set {
        gpuFreq_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DataInt);
    }

    public bool Equals(DataInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpuLoad != other.CpuLoad) return false;
      if (GpuLoad != other.GpuLoad) return false;
      if (Fps != other.Fps) return false;
      if (CpuTemp != other.CpuTemp) return false;
      if (GpuTemp != other.GpuTemp) return false;
      if (CpuFreq != other.CpuFreq) return false;
      if (GpuFreq != other.GpuFreq) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CpuLoad != 0) hash ^= CpuLoad.GetHashCode();
      if (GpuLoad != 0) hash ^= GpuLoad.GetHashCode();
      if (Fps != 0) hash ^= Fps.GetHashCode();
      if (CpuTemp != 0) hash ^= CpuTemp.GetHashCode();
      if (GpuTemp != 0) hash ^= GpuTemp.GetHashCode();
      if (CpuFreq != 0) hash ^= CpuFreq.GetHashCode();
      if (GpuFreq != 0) hash ^= GpuFreq.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CpuLoad != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CpuLoad);
      }
      if (GpuLoad != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GpuLoad);
      }
      if (Fps != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Fps);
      }
      if (CpuTemp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CpuTemp);
      }
      if (GpuTemp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GpuTemp);
      }
      if (CpuFreq != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CpuFreq);
      }
      if (GpuFreq != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GpuFreq);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CpuLoad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpuLoad);
      }
      if (GpuLoad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuLoad);
      }
      if (Fps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fps);
      }
      if (CpuTemp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpuTemp);
      }
      if (GpuTemp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuTemp);
      }
      if (CpuFreq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpuFreq);
      }
      if (GpuFreq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuFreq);
      }
      return size;
    }

    public void MergeFrom(DataInt other) {
      if (other == null) {
        return;
      }
      if (other.CpuLoad != 0) {
        CpuLoad = other.CpuLoad;
      }
      if (other.GpuLoad != 0) {
        GpuLoad = other.GpuLoad;
      }
      if (other.Fps != 0) {
        Fps = other.Fps;
      }
      if (other.CpuTemp != 0) {
        CpuTemp = other.CpuTemp;
      }
      if (other.GpuTemp != 0) {
        GpuTemp = other.GpuTemp;
      }
      if (other.CpuFreq != 0) {
        CpuFreq = other.CpuFreq;
      }
      if (other.GpuFreq != 0) {
        GpuFreq = other.GpuFreq;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CpuLoad = input.ReadInt32();
            break;
          }
          case 16: {
            GpuLoad = input.ReadInt32();
            break;
          }
          case 24: {
            Fps = input.ReadInt32();
            break;
          }
          case 32: {
            CpuTemp = input.ReadInt32();
            break;
          }
          case 40: {
            GpuTemp = input.ReadInt32();
            break;
          }
          case 48: {
            CpuFreq = input.ReadInt32();
            break;
          }
          case 56: {
            GpuFreq = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ComputerInfo : pb::IMessage<ComputerInfo> {
    private static readonly pb::MessageParser<ComputerInfo> _parser = new pb::MessageParser<ComputerInfo>(() => new ComputerInfo());
    public static pb::MessageParser<ComputerInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::WearFPSForms.WearFpsProtoReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ComputerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ComputerInfo(ComputerInfo other) : this() {
      cpuName_ = other.cpuName_;
      gpuName_ = other.gpuName_;
    }

    public ComputerInfo Clone() {
      return new ComputerInfo(this);
    }

    /// <summary>Field number for the "cpuName" field.</summary>
    public const int CpuNameFieldNumber = 1;
    private string cpuName_ = "";
    public string CpuName {
      get { return cpuName_; }
      set {
        cpuName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gpuName" field.</summary>
    public const int GpuNameFieldNumber = 2;
    private string gpuName_ = "";
    public string GpuName {
      get { return gpuName_; }
      set {
        gpuName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ComputerInfo);
    }

    public bool Equals(ComputerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpuName != other.CpuName) return false;
      if (GpuName != other.GpuName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CpuName.Length != 0) hash ^= CpuName.GetHashCode();
      if (GpuName.Length != 0) hash ^= GpuName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CpuName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CpuName);
      }
      if (GpuName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GpuName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CpuName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CpuName);
      }
      if (GpuName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GpuName);
      }
      return size;
    }

    public void MergeFrom(ComputerInfo other) {
      if (other == null) {
        return;
      }
      if (other.CpuName.Length != 0) {
        CpuName = other.CpuName;
      }
      if (other.GpuName.Length != 0) {
        GpuName = other.GpuName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CpuName = input.ReadString();
            break;
          }
          case 18: {
            GpuName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
